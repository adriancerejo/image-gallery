{"version":3,"sources":["Picture.js","App.js","serviceWorker.js","index.js"],"names":["Picture","source","firstName","lastName","likes","thumbnail","console","log","className","alt","effect","placeholderSrc","src","App","useState","images","setImages","search","setSearch","query","setQuery","useEffect","getImages","a","async","fetch","response","json","data","results","onSubmit","e","preventDefault","TextField","type","value","onChange","target","placeholder","Button","variant","color","map","image","key","id","links","download","user","first_name","last_name","urls","thumb","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAwBeA,G,MAnBC,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAElD,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,QACX,2CAAiBN,EAAjB,IAA6BC,GAC7B,2BACA,kBAAC,IAAD,MADA,IACYC,GAGZ,kBAAC,gBAAD,CAAeI,UAAU,UACzBC,IAAI,GACJC,OAAO,OACPC,eAAgBN,EAChBO,IAAKX,O,gBCoCFY,G,MA/CH,WAEV,IAFgB,EAIYC,mBAAS,IAJrB,mBAITC,EAJS,KAIDC,EAJC,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,aANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAUMG,EAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACOE,MAAK,4DArBd,mEAqBc,kBAC8CN,EAD9C,kBADZ,cACVO,EADU,kBAAAH,EAAA,MAIGG,EAASC,QAJZ,OAIVC,EAJU,OAKhBZ,EAAUY,EAAKC,SACfvB,QAAQC,IAAIqB,EAAKC,SAND,sCAUlB,OACE,yBAAKrB,UAAU,OACb,0BAAMsB,SAlBQ,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAemBV,UAAU,eACnC,kBAACyB,EAAA,EAAD,CAAWzB,UAAU,aAAa0B,KAAK,OAAOC,MAAOlB,EAAQmB,SAvB9C,SAAAL,GACnBb,EAAUa,EAAEM,OAAOF,QAsBsEG,YAAY,sBACjG,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUjC,UAAU,gBAAgB0B,KAAK,UAA3E,WAGGnB,EAAO2B,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CAASC,IAAKD,EAAME,GAAI5C,OAAQ0C,EAAMG,MAAMC,SAAU7C,UAAWyC,EAAMK,KAAKC,WAAY9C,SAAUwC,EAAMK,KAAKE,UAAW9C,MAAOuC,EAAMvC,MAAOC,UAAWsC,EAAMQ,KAAKC,cCnC1JC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a72df3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaHeart} from 'react-icons/fa';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nconst Picture = ({source, firstName, lastName, likes, thumbnail}) => {\r\n    console.log(thumbnail)\r\n    return (\r\n        <div className=\"tile\">\r\n            <p>Uploaded By: {firstName} {lastName}</p>\r\n            <p>\r\n            <FaHeart/> {likes} \r\n            </p>\r\n            {/* <img className=\"picture\" src={source} alt='' /> */}\r\n            <LazyLoadImage className=\"picture\"\r\n            alt=\"\"\r\n            effect=\"blur\"\r\n            placeholderSrc={thumbnail}\r\n            src={source}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Picture","import React , { useEffect, useState }from 'react';\nimport Picture from './Picture';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\n\nconst App = () => {\n  \n  const client_id=`cdf04b05665f0efd4eb7272c93633384cae55bb23a0833102eee61692ebda4fd`;\n\n  const [images, setImages] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('mountains');\n  \n  useEffect(() =>{\n    getImages();\n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\")\n  }\n\n  const getImages = async () => {\n    const response = await fetch (\n      `https://api.unsplash.com/search/photos/?client_id=${client_id}&query=${query}&per_page=30`\n    );\n    const data = await response.json();\n    setImages(data.results);\n    console.log(data.results);\n}\n\n \n  return (\n    <div className=\"App\">  \n      <form onSubmit={getSearch} className=\"search-form\">\n        <TextField className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search for Images\"/>\n        <Button variant='contained' color='primary' className='search-button' type=\"submit\">Search</Button>\n      </form>\n\n          {images.map(image => (\n            <Picture key={image.id} source={image.links.download} firstName={image.user.first_name} lastName={image.user.last_name} likes={image.likes} thumbnail={image.urls.thumb}/>\n          ) \n          )}    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}